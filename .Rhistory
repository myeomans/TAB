title = "Heatmap of ADR vs. Total Nights Stayed (Filtered ADR ≤ $1000)",
x = "Total Nights Stayed",
y = "Average Daily Rate (ADR)"
) +
theme_minimal()
#| warning: false
#| message: false
# Q2 C) Time-series plot of total revenue generated for each hotel over the year and month
# Compute total nights stayed
data <- data %>%
mutate(
total_nights = stays_in_weekend_nights + stays_in_week_nights,
revenue = adr * total_nights  # Calculate total revenue per booking
)
# Aggregate revenue by year, month, and hotel type
monthly_revenue <- data %>%
group_by(Year, Month, hotel) %>%
summarise(total_revenue = sum(revenue, na.rm = TRUE), .groups = "drop")
# Time-Series Line Chart
ggplot(monthly_revenue, aes(x = interaction(Year, Month, sep = "-"), y = total_revenue, color = hotel, group = hotel)) +
geom_line(size = 1) +
scale_x_discrete(guide = guide_axis(angle = 90)) +  # Rotate x-axis labels for readability
scale_y_continuous(labels = dollar_format(prefix = "$")) +
#scale_color_viridis_d(name = "Hotel Type") +
labs(
title = "Total Monthly Revenue for Each Hotel",
x = "Year-Month",
y = "Total Revenue"
) +
theme_minimal()
#| warning: false
#| message: false
# Q2 C) Time-series plot of total revenue generated for each hotel over the year and month
# Compute total nights stayed
data <- data %>%
mutate(
total_nights = stays_in_weekend_nights + stays_in_week_nights,
revenue = adr * total_nights  # Calculate total revenue per booking
)
# Aggregate revenue by year, month, and hotel type
monthly_revenue <- data %>%
group_by(Year, Month, hotel) %>%
summarise(total_revenue = sum(revenue, na.rm = TRUE), .groups = "drop")
# Time-Series Line Chart
ggplot(monthly_revenue, aes(x = interaction(Month, Year, sep = "-"), y = total_revenue, color = hotel, group = hotel)) +
geom_line(size = 1) +
scale_x_discrete(guide = guide_axis(angle = 90)) +  # Rotate x-axis labels for readability
scale_y_continuous(labels = dollar_format(prefix = "$")) +
#scale_color_viridis_d(name = "Hotel Type") +
labs(
title = "Total Monthly Revenue for Each Hotel",
x = "Year-Month",
y = "Total Revenue"
) +
theme_minimal()
#| warning: false
#| message: false
# Q3 A) Top 5 countries with the highest number of bookings
# Identify the top 5 countries with the highest number of bookings
top_countries <- data %>%
count(country, sort = TRUE) %>%
top_n(5, n) %>%
pull(country)
# Filter data for these countries
top_countries_df <- data %>%
filter(country %in% top_countries)
# Summarize cancellation rate based on booking changes
summary_df <- top_countries_df %>%
group_by(country) %>%
summarise(
booking_count = n(),
cancellations = sum(as.numeric(is_canceled) - 1),  # Convert factor to numeric
cancellation_rate = cancellations / booking_count)
# Visualization
ggplot(summary_df, aes(x = reorder(country, -booking_count))) +
geom_bar(aes(y = booking_count), stat = "identity", fill = "orange", alpha = 0.7) +
geom_line(aes(y = cancellation_rate * max(booking_count), group = 1), color = "red", size = 1.2) +
geom_point(aes(y = cancellation_rate * max(booking_count)), color = "red", size = 3) +
scale_y_continuous(
name = "Booking Count",
sec.axis = sec_axis(~./max(summary_df$booking_count), name = "Cancellation Rate")
) +
labs(title = "Top 5 Countries by Bookings and Their Cancellation Rates",
x = "Country") +
theme_minimal()
#| warning: false
#| message: false
# Q3 A) Top 5 countries with the highest number of bookings
# Identify the top 5 countries with the highest number of bookings
top_countries <- data %>%
count(country, sort = TRUE) %>%
top_n(5, n) %>%
pull(country)
# Filter data for these countries
top_countries_df <- data %>%
filter(country %in% top_countries)
# Summarize cancellation rate based on booking changes
summary_df <- top_countries_df %>%
group_by(country) %>%
summarise(
booking_count = n(),
cancellations = sum(as.numeric(is_canceled) - 1),  # Convert factor to numeric
cancellation_rate = cancellations / booking_count)
# Visualization
ggplot(summary_df, aes(x = reorder(country, -booking_count))) +
geom_bar(aes(y = booking_count), stat = "identity", fill = "orange", alpha = 0.7) +
geom_line(aes(y = cancellation_rate * max(booking_count), group = 1), color = "red", size = 1.2) +
geom_point(aes(y = cancellation_rate * max(booking_count)), color = "red", size = 3) +
scale_y_continuous(
name = "Booking Count",
sec.axis = sec_axis(~./max(summary_df$booking_count), name = "Cancellation Rate")
) +
labs(title = "Top 5 Countries by Bookings and Their Cancellation Rates",
x = "Country") +
theme_minimal()
#| warning: false
#| message: false
# Q1 A) Cancellation rates for both hotels
total_city_bookings <- nrow(data %>%
filter(hotel=="City Hotel"))
total_resort_bookings <- nrow(data %>%
filter(hotel=="Resort Hotel"))
city_hotel_cnl_rate <- nrow(data %>%
filter(hotel=="City Hotel" & is_canceled == 1)) / total_city_bookings * 100
resort_hotel_cnl_rate <- nrow(data %>%
filter(hotel=="Resort Hotel" & is_canceled == 1)) / total_resort_bookings * 100
# Print the results
cat("Cancellation rates for resort hotels is", round(resort_hotel_cnl_rate, 2), "%\n")
cat("Cancellation rates for city hotels is", round(city_hotel_cnl_rate, 2), "%\n")
#| warning: false
#| message: false
# Q1 B) Relationship between lead time and cancellation rate
data$is_canceled <- as.factor(data$is_canceled)
cancellation_summary <- data %>%
group_by(lead_time) %>%
summarise(
total_bookings = n(),
cancellations = sum(as.numeric(is_canceled) - 1),  # Convert factor to numeric
cancellation_rate = cancellations / total_bookings
)
# Scatter plot representation
ggplot(cancellation_summary, aes(x = lead_time, y = cancellation_rate)) +
geom_point(color = "blue", alpha = 0.5) +
geom_smooth(method = "loess", color = "red", se = FALSE) +  # Trend line
scale_y_continuous(labels = percent_format()) +
labs(
title = "Lead Time vs Cancellation Rate",
x = "Lead Time (Days)",
y = "Cancellation Rate"
) +
theme_minimal()
# Box plot representation
ggplot(data, aes(x = is_canceled, y = lead_time, fill = is_canceled)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16, alpha = 0.7) +
scale_fill_viridis_d(name = "Cancellation Status", labels = c("Not Canceled", "Canceled")) +
scale_y_continuous(breaks = seq(0, max(data$lead_time, na.rm = TRUE), 50)) +
labs(
title = "Comparison of Lead Time for Canceled and Non-Canceled Bookings",
x = "Cancellation Status",
y = "Lead Time (Days)"
) +
theme_minimal()
#| warning: false
#| message: false
# Q2 A) Time-series plot of monthly average daily rates for each hotel over the years
# Convert date column to proper Date format (assuming 'reservation_status_date' contains the booking date)
data$reservation_status_date <- as.Date(data$reservation_status_date)
# Extract year and month for time-series analysis
data <- data %>%
mutate(
Year = year(reservation_status_date),
Month = month(reservation_status_date, label = TRUE) # Converts month to a labeled factor
)
# Compute monthly average ADR for each hotel
monthly_adr <- data %>%
group_by(Year, Month, hotel) %>%
summarise(Avg_ADR = mean(adr, na.rm = TRUE), .groups = "drop")
# Time-series plot
ggplot(monthly_adr, aes(x = interaction(Month, Year, sep = "-"), y = Avg_ADR, color = hotel, group = hotel)) +
geom_line(linewidth = 1) +
scale_x_discrete(guide = guide_axis(angle = 45)) +  # Rotate x-axis labels for readability
scale_y_continuous(labels = dollar_format(prefix = "$")) +
#scale_color_viridis_d(name = "Hotel Type") +
labs(
title = "Monthly Average Daily Rate (ADR) Over Time",
x = "Year-Month",
y = "Average Daily Rate (ADR)"
) +
theme_minimal()
#| warning: false
#| message: false
# Q2 B) Relationship between monthly average daily rates and the total number of nights stayed
# Compute total nights stayed
data <- data %>%
mutate(total_nights = stays_in_weekend_nights + stays_in_week_nights)  %>%
filter(adr <= 1000)  # Remove outliers where ADR > 1000
# Heatmap of ADR vs. Total Nights Stayed
ggplot(data, aes(x = total_nights, y = adr)) +
geom_bin2d(bins = 30) +
scale_fill_viridis_c(name = "Count") +
scale_y_continuous(labels = dollar_format(prefix = "$")) +
labs(
title = "Heatmap of ADR vs. Total Nights Stayed (Filtered ADR ≤ $1000)",
x = "Total Nights Stayed",
y = "Average Daily Rate (ADR)"
) +
theme_minimal()
print(cancellation_summary)
print(booking_changes_summary)
cancellation_summary <- data %>%
group_by(booking_changes) %>%
summarise(
total_bookings = n(),
cancellations = sum(as.numeric(is_canceled) - 1),  # Convert factor to numeric
cancellation_rate = cancellations / total_bookings
)
View(booking_changes_summary)
print(cancellation_summary)
booking_changes_summary <- data %>%
group_by(booking_changes) %>%
summarise(
total_bookings = n(),
cancellations = sum(as.numeric(is_canceled) - 1),  # Convert factor to numeric
cancellation_rate = cancellations / total_bookings
)
print(booking_changes_summary)
#| warning: false
#| message: false
# Q1 D) Impact of booking changes on cancellation
# Summarize cancellation rate based on booking changes
booking_changes_summary <- data %>%
group_by(booking_changes) %>%
summarise(
total_bookings = n(),
cancellations = sum(as.numeric(is_canceled) - 1),  # Convert factor to numeric
cancellation_rate = cancellations / total_bookings
)
# Bar Plot: Cancellation Rate vs Booking Changes
ggplot(booking_changes_summary, aes(x = as.factor(booking_changes), y = cancellation_rate, fill = as.factor(booking_changes))) +
geom_bar(stat = "identity", alpha = 0.8) +
scale_y_continuous(labels = percent_format()) +
scale_fill_viridis_d(name = "Booking Changes") +
labs(
title = "Effect of Booking Changes on Cancellation Rate",
x = "Number of Booking Changes",
y = "Cancellation Rate"
) +
theme_minimal()
# Scatter Plot: Booking Changes vs Cancellation Rate with Trend Line
ggplot(booking_changes_summary, aes(x = booking_changes, y = cancellation_rate)) +
geom_point(color = "blue", alpha = 0.6, size = 3) +  # Scatter points
geom_smooth(method = "loess", color = "red", se = FALSE) +  # Trend line (LOESS)
scale_y_continuous(labels = percent_format()) +
labs(
title = "Trend of Booking Changes vs Cancellation Rate",
x = "Number of Booking Changes",
y = "Cancellation Rate"
) +
theme_minimal()
booking_changes_summary <- data %>%
group_by(booking_changes) %>%
summarise(
total_bookings = n(),
cancellations = sum(as.numeric(is_canceled) - 1),  # Convert factor to numeric
cancellation_rate = cancellations / total_bookings
)
print(booking_changes_summary)
print(summary_df)
summary_df <- data %>%
group_by(country) %>%
summarise(
total_bookings = n(),
cancellations = sum(as.numeric(is_canceled) - 1),  # Convert factor to numeric
cancellation_rate = cancellations / total_bookings
)
print(summary_df)
summary_df <- top_countries_df %>%
group_by(country) %>%
summarise(
total_bookings = n(),
cancellations = sum(as.numeric(is_canceled) - 1),  # Convert factor to numeric
cancellation_rate = cancellations / total_bookings
)
print(summary_df)
summary_df <- top_countries %>%
group_by(country) %>%
summarise(
total_bookings = n(),
cancellations = sum(as.numeric(is_canceled) - 1),  # Convert factor to numeric
cancellation_rate = cancellations / total_bookings
)
# Identify the top 5 countries with the highest number of bookings
top_countries <- data %>%
count(country, sort = TRUE) %>%
top_n(5, n)
summary_df <- top_countries %>%
group_by(country) %>%
summarise(
total_bookings = n(),
cancellations = sum(as.numeric(is_canceled) - 1),  # Convert factor to numeric
cancellation_rate = cancellations / total_bookings
)
# Identify the top 5 countries with the highest number of bookings
top_countries <- data %>%
count(country, sort = TRUE) %>%
top_n(5, n) %>%
pull(country)
# Filter data for these countries
top_countries_df <- data %>%
filter(country %in% top_countries)
print(top_countries_df)
# Identify the top 5 countries with the highest number of bookings
top_countries <- data %>%
count(country, sort = TRUE) %>%
top_n(5, n)
print(top_countries)
top_countries <- data %>%
count(country, sort = TRUE) %>%
top_n(5, n) %>%
pull(country)
# Filter data for these countries
top_countries_df <- data %>%
filter(country %in% top_countries)
print(top_countries_df)
# Summarize cancellation rate based on booking changes
summary_df <- top_countries_df %>%
group_by(country) %>%
summarise(
booking_count = n(),
cancellations = sum(as.numeric(is_canceled) - 1),  # Convert factor to numeric
cancellation_rate = cancellations / booking_count)
print(summary_df)
# Summarize cancellation rate based on booking changes
summary_df <- top_countries_df %>%
group_by(country) %>%
summarise(
booking_count = n(),
cancellations = sum(as.numeric(is_canceled) - 1),  # Convert factor to numeric
cancellation_rate = cancellations / booking_count)
print(summary_df)
#| warning: false
#| message: false
# Q3 A) Top 5 countries with the highest number of bookings
# Identify the top 5 countries with the highest number of bookings
top_countries <- data %>%
count(country, sort = TRUE) %>%
top_n(5, n) %>%
pull(country)
# Filter data for these countries
top_countries_df <- data %>%
filter(country %in% top_countries)
# Summarize cancellation rate based on booking changes
summary_df <- top_countries_df %>%
group_by(country) %>%
summarise(
booking_count = n(),
cancellations = sum(as.numeric(is_canceled) - 1),  # Convert factor to numeric
cancellation_rate = cancellations / booking_count)
print(summary_df)
# Visualization
ggplot(summary_df, aes(x = reorder(country, -booking_count))) +
geom_bar(aes(y = booking_count), stat = "identity", fill = "orange", alpha = 0.7) +
geom_line(aes(y = cancellation_rate * max(booking_count), group = 1), color = "red", size = 1.2) +
geom_point(aes(y = cancellation_rate * max(booking_count)), color = "red", size = 3) +
scale_y_continuous(
name = "Booking Count",
sec.axis = sec_axis(~./max(summary_df$booking_count), name = "Cancellation Rate")
) +
labs(title = "Top 5 Countries by Bookings and Their Cancellation Rates",
x = "Country") +
theme_minimal()
#| warning: false
#| message: false
# Q3 A) Top 5 countries with the highest number of bookings
# Identify the top 5 countries with the highest number of bookings
top_countries <- data %>%
count(country, sort = TRUE) %>%
top_n(5, n) %>%
pull(country)
# Filter data for these countries
top_countries_df <- data %>%
filter(country %in% top_countries)
# Summarize cancellation rate based on booking changes
summary_df <- top_countries_df %>%
group_by(country) %>%
summarise(
booking_count = n(),
cancellations = sum(as.numeric(is_canceled) - 1),  # Convert factor to numeric
cancellation_rate = cancellations / booking_count)
# Visualization
ggplot(summary_df, aes(x = reorder(country, -booking_count))) +
geom_bar(aes(y = booking_count), stat = "identity", fill = "orange", alpha = 0.7) +
geom_line(aes(y = cancellation_rate * max(booking_count), group = 1), color = "red", size = 1.2) +
geom_point(aes(y = cancellation_rate * max(booking_count)), color = "red", size = 3) +
scale_y_continuous(
name = "Booking Count",
sec.axis = sec_axis(~./max(summary_df$booking_count), name = "Cancellation Rate")
) +
labs(title = "Top 5 Countries by Bookings and Their Cancellation Rates",
x = "Country") +
theme_minimal()
#| warning: false
#| message: false
# Q1 D) Impact of booking changes on cancellation
# Summarize cancellation rate based on booking changes
booking_changes_summary <- data %>%
group_by(booking_changes) %>%
summarise(
total_bookings = n(),
cancellations = sum(as.numeric(is_canceled) - 1),  # Convert factor to numeric
cancellation_rate = cancellations / total_bookings
)
# Scatter Plot: Booking Changes vs Cancellation Rate with Trend Line
ggplot(booking_changes_summary, aes(x = booking_changes, y = cancellation_rate)) +
geom_point(color = "blue", alpha = 0.6, size = 3) +  # Scatter points
geom_smooth(method = "loess", color = "red", se = FALSE) +  # Trend line (LOESS)
scale_y_continuous(labels = percent_format()) +
labs(
title = "Trend of Booking Changes vs Cancellation Rate",
x = "Number of Booking Changes",
y = "Cancellation Rate"
) +
theme_minimal()
#| warning: false
#| message: false
# Q3 B) Top 5 countries with the highest number of bookings
# Compute market segment composition for each hotel type
market_segment_summary <- data %>%
group_by(hotel, market_segment) %>%
summarise(count = n(), .groups = "drop") %>%
mutate(percentage = count / sum(count) * 100)
# Stacked Bar Chart: Market Segment Composition
ggplot(market_segment_summary, aes(x = hotel, y = percentage, fill = market_segment)) +
geom_bar(stat = "identity", position = "fill") +
scale_y_continuous(labels = percent_format()) +
scale_fill_viridis_d(name = "Market Segment") +
labs(
title = "Market Segment Composition for City and Resort Hotels",
x = "Hotel Type",
y = "Percentage of Bookings"
) +
theme_minimal()
#| warning: false
#| message: false
library(tidyverse)
library(scales)
library(ggplot2)
library(viridis)
data <- read_csv("data/hotels.csv")
glimpse(data)
setwd("C:/Users/cmara/eclipse-workspace/TAB")
library(quanteda)
library(ggrepel)
library(textclean)
library(tidyverse)
library(glmnet)
library(pROC)
library(sentimentr) # new one... for sentiment
library(stm) # new one... for topic models
source("TAB_dfm.R")
source("kendall_acc.R")
# Review data
rev_med<-readRDS("rev_med.RDS") %>%
filter(str_count(text,"[[:alpha:]]+")>25)
View(rev_med)
View(rev_med)
# note - this makes the "random" splits identical for all of us, so we get the same results
set.seed(20138)
train_split=sample(1:nrow(rev_med),9000)
rev_med_train<-rev_med[train_split,]
rev_med_test<-rev_med[-train_split,]
rev_med_dfm_train<-TAB_dfm(rev_med_train$text,ngrams=1)
rev_med_dfm_test<-TAB_dfm(rev_med_test$text,
ngrams=1,
min.prop=0) %>%
dfm_match(colnames(rev_med_dfm_train))
rev_model<-glmnet::cv.glmnet(x=rev_med_dfm_train %>%
as.matrix(),
y=rev_med_train$stars)
plot(rev_model)
#### Interpret with a coefficient plot
plotDat<-rev_model %>%
coef() %>%
drop() %>%
as.data.frame() %>%
rownames_to_column(var = "ngram") %>%
rename(score=".") %>%
filter(score!=0 & ngram!="(Intercept)" & !is.na(score))  %>%
# add ngram frequencies for plotting
left_join(data.frame(ngram=colnames(rev_med_dfm_train),
freq=colMeans(rev_med_dfm_train)))
plotDat %>%
mutate_at(vars(score,freq),~round(.,3))
plotDat %>%
ggplot(aes(x=score,y=freq,label=ngram,color=score)) +
scale_color_gradient(low="blue",high="red")+
geom_vline(xintercept=0)+
geom_point() +
geom_label_repel(max.overlaps = 30,force = 6)+
scale_y_continuous(trans="log2",
breaks=c(.01,.05,.1,.2,.5,1,2,5))+
theme_bw() +
labs(x="Coefficient in Model",y="Uses per Review")+
theme(legend.position = "none",
axis.title=element_text(size=20),
axis.text=element_text(size=16))
#### Evaluate Accuracy
test_ngram_predict<-predict(rev_model,
newx = rev_med_dfm_test %>%
as.matrix())[,1]
acc_ngram<-kendall_acc(rev_med_test$stars,test_ngram_predict)
acc_ngram
